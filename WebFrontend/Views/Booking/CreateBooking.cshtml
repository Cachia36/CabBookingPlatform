@using WebFrontend.Models;
@model BookingViewModel;
@{
    ViewData["Title"] = "Create Booking";
    var UserId = Context.Session.GetString("UserId");
    var savedLocations = ViewBag.SavedLocations as List<string>;
}

<h2>Book a cab</h2>

<form asp-controller="Booking" asp-action="CreateBooking" method="post">

    <div class="form-group" hidden>
        <input value="@UserId" asp-for="UserId" class="form-control" />
    </div>

    <div class="form-group">
        <label>From (Pickup Location)</label>

        @if (savedLocations != null && savedLocations.Any())
        {
            <div class="form-check">
                <input class="form-check-input" type="radio" name="PickupOption" id="pickupSaved" checked onclick="togglePickupInput(true)">
                <label class="form-check-label" for="pickupSaved">Choose from saved locations</label>
            </div>

            <div class="form-check mb-2">
                <input class="form-check-input" type="radio" name="PickupOption" id="pickupManual" onclick="togglePickupInput(false)">
                <label class="form-check-label" for="pickupManual">Enter manually</label>
            </div>

            <select id="pickupDropdown" class="form-control mb-2" onchange="document.getElementById('StartLocation').value = this.value">
                @foreach (var location in savedLocations)
                {
                    <option value="@location">@location</option>
                }
            </select>
        }

        <input asp-for="StartLocation" id="StartLocation" class="form-control @(savedLocations == null || !savedLocations.Any() ? "" : "d-none")" placeholder="Enter pickup location manually" />
        <span asp-validation-for="StartLocation" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label>To (Drop-off Location)</label>

        @if (savedLocations != null && savedLocations.Any())
        {
            <div class="form-check">
                <input class="form-check-input" type="radio" name="DropOffOption" id="dropoffSaved" checked onclick="toggleDropOffInput(true)">
                <label class="form-check-label" for="dropoffSaved">Choose from saved locations</label>
            </div>

            <div class="form-check mb-2">
                <input class="form-check-input" type="radio" name="DropOffOption" id="dropoffManual" onclick="toggleDropOffInput(false)">
                <label class="form-check-label" for="dropoffManual">Enter manually</label>
            </div>

            <select id="DropoffDropdown" class="form-control mb-2" onchange="document.getElementById('EndLocation').value = this.value">
                @foreach (var location in savedLocations)
                {
                    <option value="@location">@location</option>
                }
            </select>
        }

        <input asp-for="EndLocation" id="EndLocation" class="form-control @(savedLocations == null || !savedLocations.Any() ? "" : "d-none")" placeholder="Enter drop-off location manually" />
        <span asp-validation-for="EndLocation" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="RideDateTime">Date and Time</label>
        <input asp-for="RideDateTime" class="form-control" type="datetime-local" />
        <span asp-validation-for="RideDateTime" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="PassengerCount">Passengers</label>
        <input asp-for="PassengerCount" class="form-control" />
        <span asp-validation-for="PassengerCount" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="CabType">Cab Type</label>
        <select asp-for="CabType" class="form-control">
            <option value="Economic">Economic</option>
            <option value="Premium">Premium</option>
            <option value="Executive">Executive</option>
        </select>
        <span asp-validation-for="CabType" class="text-danger"></span>
    </div>

    <div class="form-group">
        <input asp-for="TotalPrice" id="TotalPrice" hidden />
    </div>

    <div class="form-group">
        <input asp-for="BaseFarePrice" id="BaseFarePrice" hidden />
    </div>

    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <br />
    <button type="button" id="calcBtn" onclick="calculateFare()">Calculate Price</button>

    <div id="fareResult" style="margin-top:10px;"></div>

    <button type="submit" class="btn btn-primary" id="payButton" style="display:none;">Pay</button>
</form>

@section Scripts {
    <script>
        function togglePickupInput(useSaved) {
            const dropdown = document.getElementById("pickupDropdown");
            const textInput = document.getElementById("StartLocation");
            if (useSaved) {
                dropdown.classList.remove("d-none");
                textInput.classList.add("d-none");
                textInput.value = dropdown.value;
            } else {
                dropdown.classList.add("d-none");
                textInput.classList.remove("d-none");
                textInput.value = "";
            }
        }
        // Initialize on page load
        document.addEventListener("DOMContentLoaded", () => {
            togglePickupInput(true);
        });

        function toggleDropOffInput(useSaved) {
            const dropdown = document.getElementById("DropoffDropdown");
            const textInput = document.getElementById("EndLocation");
            if (useSaved) {
                dropdown.classList.remove("d-none");
                textInput.classList.add("d-none");
                textInput.value = dropdown.value;
            } else {
                dropdown.classList.add("d-none");
                textInput.classList.remove("d-none");
                textInput.value = "";
            }
        }
        // Initialize on page load
        document.addEventListener("DOMContentLoaded", () => {
            toggleDropOffInput(true);
        });
    </script>
        
    <script>
        const gatewayBaseUrl = '@ViewBag.GatewayBaseUrl';
        function showMessage(msg) {
          document.getElementById("fareResult").innerText = msg;
        }

        function validateInputs() {
          const startLocation = document.getElementById("StartLocation").value.trim();
          const endLocation   = document.getElementById("EndLocation").value.trim();
          const dateTime      = document.getElementById("RideDateTime").value.trim();
          const passengersStr = document.getElementById("PassengerCount").value.trim();
          const passengers    = Number(passengersStr);

          const errors = [];
          if (!startLocation) errors.push("Pickup location is required.");
          if (!endLocation)   errors.push("Drop-off location is required.");
          if (!dateTime)      errors.push("Date and time are required.");
          if (!passengersStr) errors.push("Passenger count is required.");
          else if (!Number.isFinite(passengers) || passengers < 1) errors.push("Passenger count must be a positive number.");

          return { ok: errors.length === 0, errors, startLocation, endLocation, dateTime, passengers };
        }

        async function calculateFare() {
          const calcBtn = document.getElementById("calcBtn");
          const payBtn  = document.getElementById("payButton");

          // reset UI
          payBtn.style.display = "none";
          payBtn.disabled = true;

          // validate first
          const v = validateInputs();
          if (!v.ok) {
            showMessage(v.errors.join(" "));
            return;
          }

          calcBtn.innerText = "Calculating Price...";
          calcBtn.disabled = true;

          try {
            const payload = {
              cabType: document.getElementById("CabType").value,
              passengerCount: v.passengers,                // guaranteed number
              dateTime: v.dateTime,                        // non-empty
              startLocation: v.startLocation,              // non-empty
              endLocation: v.endLocation,                  // non-empty
              isDiscountEligible: @(ViewBag.HasReceivedDiscount != null ? ViewBag.HasReceivedDiscount.ToString().ToLowerInvariant() : "false")
            };

            const response = await fetch(`${gatewayBaseUrl}/fareEstimation/estimate`, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify(payload)
            });

            // handle non-OK with readable message
            if (!response.ok) {
              let msg = "Failed to calculate fare.";
              try {
                const problem = await response.json(); // ASP.NET Core ProblemDetails/validation
                if (problem?.title) msg = problem.title;
                if (problem?.detail) msg += ` ${problem.detail}`;
                if (problem?.errors) {
                  const firstKey = Object.keys(problem.errors)[0];
                  if (firstKey) msg += ` ${problem.errors[firstKey][0]}`;
                }
              } catch { /* ignore parse errors */ }
              showMessage(msg);
              return;
            }

            const result = await response.json();

            // guard against missing totalPrice/baseFarePrice
            if (result?.totalPrice == null || !Number.isFinite(Number(result.totalPrice))) {
              showMessage("Fare response was missing a total price.");
              return;
            }

            document.getElementById("fareResult").innerText = `Total Price: €${result.totalPrice}`;
            document.getElementById("TotalPrice").value = result.totalPrice;
            document.getElementById("BaseFarePrice").value = result.baseFarePrice ?? "";

            // show Pay
            payBtn.style.display = "inline-block";
            payBtn.disabled = false;
          }
          catch (err) {
            console.error("Error calculating fare", err);
            showMessage("Error calculating fare.");
          }
          finally {
            calcBtn.innerText = "Calculate Price";
            calcBtn.disabled = false;
          }
        }
    </script>

    <script>
        document.addEventListener("DOMContentLoaded", () => {
          const form = document.querySelector("form");
          const payBtn = document.getElementById("payButton");

          form.addEventListener("submit", () => {
            if (payBtn) {
              payBtn.innerText = "Paying...";
              payBtn.disabled = true;
            }
          });
        });
    </script>

}
